#!/usr/bin/env python

'''The XML-RPC Bcfg2 Server'''
__revision__ = '$Revision$'

from Bcfg2.Server.Core import Core, CoreInitError
from Bcfg2.Server.Metadata import MetadataConsistencyError
from xmlrpclib import Fault
from lxml.etree import XML, Element, tostring

import getopt, logging, os, select, signal, socket, sys
import Bcfg2.Logging, Bcfg2.Server.Component

logger = logging.getLogger('bcfg2-server')

def daemonize(filename):
    '''Do the double fork/setsession dance'''
    # Fork once
    if os.fork() != 0:      
        os._exit(0)         
    os.setsid()                     # Create new session
    pid = os.fork()
    if pid != 0:
        pidfile = open(filename, "w")
        pidfile.write("%i" % pid)
        pidfile.close()
        os._exit(0)     
    os.chdir("/")         
    os.umask(0)

    null = open("/dev/null", "w+")

    os.dup2(null.fileno(), sys.__stdin__.fileno())
    os.dup2(null.fileno(), sys.__stdout__.fileno())
    os.dup2(null.fileno(), sys.__stderr__.fileno())

def critical_error(operation):
    '''Log and err, traceback and return an xmlrpc fault to client'''
    logger.error(operation, exc_info=1)
    raise Fault, (7, "Critical unexpected failure: %s" % (operation))

def fatal_error(message):
    '''Signal a fatal error'''
    logger.critical("Fatal error: %s" % (message))
    raise SystemExit, 1

def usage(message, opts, vopts, odescs, vargDescs):
    '''print usage message'''
    logger.critical(message)
    [logger.critical(" -%s\t\t\t%s" % (arg, odescs[arg])) for arg in opts]
    [logger.critical(" -%s %s\t%s" % (arg, vargDescs[arg], odescs[arg])) for arg in vopts]
    raise SystemExit, 2

def dgetopt(arglist, opt, vopt, descs, argDescs):
    '''parse options into a dictionary'''
    ret = {}
    for optname in opt.values() + vopt.values():
        ret[optname] = False
        
    gstr = "".join(opt.keys()) + "".join([optionkey + ':' for optionkey in vopt.keys()])
    try:
        ginfo = getopt.getopt(arglist, gstr)
    except getopt.GetoptError, gerr:
        usage("Usage error: %s" % gerr, opt, vopt, descs, argDescs)

    for (gopt, garg) in ginfo[0]:
        option = gopt[1:]
        if opt.has_key(option):
            ret[opt[option]] = True
        else:
            ret[vopt[option]] = garg

    if ret["help"] == True:
        usage("Usage information", opt, vopt, descs, argDescs)

    return ret

class Bcfg2Serv(Bcfg2.Server.Component.Component):
    """The Bcfg2 Server component providing XML-RPC access to Bcfg methods"""
    __name__ = 'bcfg2'
    __implementation__ = 'bcfg2'

    request_queue_size = 15

    def __init__(self, setup):
        Bcfg2.Server.Component.Component.__init__(self, setup)
        self.shut = False
        # set shutdown handlers for sigint and sigterm
        signal.signal(signal.SIGINT, self.start_shutdown)
        signal.signal(signal.SIGTERM, self.start_shutdown)
        try:
            self.Core = Core(setup, setup['configfile'])
        except CoreInitError, msg:
            fatal_error(msg)

        self.funcs.update({
            "AssertProfile": self.Bcfg2AssertProfile, 
            "GetConfig": self.Bcfg2GetConfig,
            "GetProbes": self.Bcfg2GetProbes,
            "RecvProbeData": self.Bcfg2RecvProbeData,
            "RecvStats": self.Bcfg2RecvStats
            })
        for plugin in self.Core.plugins.values():
            for method in plugin.__rmi__:
                self.register_function(getattr(self.Core.plugins[plugin.__name__], method),
                                       "%s.%s" % (plugin.__name__, method))

    def get_request(self):
        '''We need to do work between requests, so select with timeout instead of blocking in accept'''
        rsockinfo = []
        famfd = self.Core.fam.fileno()
        while self.socket not in rsockinfo:
            if self.shut:
                raise socket.error
            try:
                rsockinfo = select.select([self.socket, famfd], [], [], 15)[0]
            except select.error:
                continue
            
            if famfd in rsockinfo:
                self.Core.fam.Service()
            if self.socket in rsockinfo:
                return self.socket.accept()

    def resolve_client(self, client):
        if self.setup['client']:
            return self.setup['client']
        try:
            return socket.gethostbyaddr(client)[0]
        except socket.herror:
            warning = "host resolution error for %s" % (client)
            self.logger.warning(warning)
            raise Fault, (5, warning)
        
    def Bcfg2GetProbes(self, address):
        '''Fetch probes for a particular client'''
        client = self.resolve_client(address[0])
        resp = Element('probes')

        try:
            meta = self.Core.metadata.get_metadata(client)
            
            for generator in self.Core.generators:
                for probe in generator.GetProbes(meta):
                    resp.append(probe)
            return tostring(resp)
        except MetadataConsistencyError:
            warning = 'metadata consistency error'
            self.logger.warning(warning)
            raise Fault, (6, warning)
        except:
            critical_error("error determining client probes")

    def Bcfg2RecvProbeData(self, address, probedata):
        '''Receive probe data from clients'''
        client = self.resolve_client(address[0])

        for data in probedata:
            try:
                [generator] = [gen for gen in self.Core.generators if gen.__name__ == data.get('source')]
                generator.ReceiveData(client, data)
            except IndexError:
                self.logger.warning("Failed to locate plugin %s" % (data.get('source')))
            except:
                critical_error('error in probe data receipt')
        return True

    def Bcfg2AssertProfile(self, address, profile):
        '''Set profile for a client'''
        client = self.resolve_client(address[0])
        try:
            self.Core.metadata.set_profile(client, profile)
        except MetadataConsistencyError:
            warning = 'metadata consistency error'
            self.logger.warning(warning)
            raise Fault, (6, warning)
        return True

    def Bcfg2GetConfig(self, address, image=False, profile=False):
        '''Build config for a client'''
        client = self.resolve_client(address[0])
        return tostring(self.Core.BuildConfiguration(client))

    def Bcfg2RecvStats(self, address, stats):
        '''Act on statistics upload'''
        sdata = XML(stats)
        state = sdata.find(".//Statistics")
        # Versioned stats to prevent tied client/server upgrade
        if state.get('version') >= '2.0':
            client = self.resolve_client(address[0])
            
            # Update statistics
            self.Core.stats.updateStats(sdata, client)

        self.logger.info("Client %s reported state %s" % 
                         (client, state.attrib['state']))
        return "<ok/>"

if __name__ == '__main__':
    Bcfg2.Logging.setup_logging('bcfg2-server')
    options =  {
        'v':'verbose',
        'd':'debug',
        'h':'help'
        }
    doptions = {
        'D':'daemon',
        'c':'configfile',
        'C':'client'
        }

    descriptions = {
        'v': "enable verbose output",
        'd': "enable debugging output",
        'D': "daemonise the server, storing PID",
        'c': "set the server's config file",
        'C': "always return the given client's config (debug only)",
        'h': "display this usage information"
        }

    argDescriptions = {
        'D': "<PID file>   ",
        'c': "<config file>",
        'C': "<client hostname>"
        }
    
    ssetup = dgetopt(sys.argv[1:], options, doptions,
                     descriptions, argDescriptions)
    if ssetup['daemon']:
        daemonize(ssetup['daemon'])
    if not ssetup['configfile']:
        ssetup['configfile'] = '/etc/bcfg2.conf'
    s = Bcfg2Serv(ssetup)
    while not s.shut:
        try:
            s.serve_forever()
        except:
            critical_error('error in service loop')
    logger.info("Shutting down")
